# -*- coding: utf-8 -*-
"""Check-doc-content.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b9PlOG9cYDp_cd26JIMdjrgcNfHsP8Bg
"""

from validate_docbr import CPF, CNH, CNPJ, PIS, TituloEleitoral

import docx2txt
import re
import pycep_correios
import phonenumbers
import textract
import pyodbc
import os
from person import Person

def check_name(nome):

  if len(nome) < 3:
    return False

  conn = pyodbc.connect('Driver={SQL Server Native Client 11.0};'
                        'Server=localhost;'
                        'Database=Northwind;'
                        'Trusted_Connection=yes;')

  cursor = conn.cursor()
  row = cursor.execute("SELECT * FROM Customers where Name like '%{0}%'".format(nome)).fetchone()

  if row:
    print(row)
    return True

  return False

def validate_cpf(doc):
    cpf = CPF()
    return cpf.validate(doc)

def validate_cnh(doc):
    cnh = CNH()
    return cnh.validate(doc)

def validate_cnpj(doc):
    cnpj = CNPJ()
    return cnpj.validate(doc)

def validate_pis(doc):
    pis = PIS()
    return pis.validate(doc)

def validate_titulo(doc):
    titulo = TituloEleitoral()
    return titulo.validate(doc)

def validate_cep(cep):
  if re.match("[0-9]{5}-[0-9]{3}", cep) or re.match("[0-9]{5}[0-9]{3}", cep):
    endereco = pycep_correios.get_address_from_cep(cep)
    return endereco
  return False

def validate_celular(telefone):
  if not telefone[:3] == "+55":
    telefone = "+55" + telefone

  z = phonenumbers.parse(telefone, None)

  return phonenumbers.is_valid_number(z)

def validate_cep(cep):
  if re.match("[0-9]{5}-[0-9]{3}", cep) or re.match("[0-9]{5}[0-9]{3}", cep):
    endereco = pycep_correios.get_address_from_cep(cep)
    return endereco
  return False

def verificacoes(texto):
  lines = texto.split('\n')
  people = []
  person = Person()

  for line in lines:
    for word in line.split(' '):
      try:
        word = word.strip()

        if check_name(word):
          person.nome = word

        if validate_cpf(word):
          if person.cpf :
            people.append(person)
            people = people[:]
            person = Person()
          elif person.cnpj:
            people.append(person)
            people = people[:]
            person = Person()
          person.cpf = word

        if len(word) == 9:
          endereco = validate_cep(word)

          if endereco:
            person.cep = word
            person.endereco = endereco

        if validate_celular(word):
          person.celular = word

        if validate_cnh(word):
          person.cnh = word

        if validate_cnpj(word):
          if person.cnpj:
            people.append(person)
            people = people[:]
            person = Person()
          elif person.cpf:
            people.append(person)
            people = people[:]
            person = Person()
          person.cnpj = word

        if validate_pis(word):
          person.pis = word

        if validate_titulo(word):
          person.titulo = word
      except:
        continue
  people.append(person)
  return people

def verificar_docx(arquivo):
  result = docx2txt.process(arquivo)
  return verificacoes(result)

def verificar_txt(arquivo):
  result = open(arquivo, "r")
  return verificacoes(result.read())

def verificar_pdf(arquivo):
  texto = textract.process(arquivo)
  texto = texto.decode("utf-8") 
  return verificacoes(texto)

def verificar_documento(arquivo):
  arquivo_partes = arquivo.split('.')
  ext = arquivo_partes[len(arquivo_partes)-1]
  people = None
  
  if os.path.isfile(arquivo):
    print("Verificando -- " + arquivo)
    if ext.lower() == 'txt':
      people = verificar_txt(arquivo)
    elif ext.lower() == 'pdf':
      people = verificar_pdf(arquivo)
    elif ext.lower() == 'docx':
      people = verificar_docx(arquivo)
    else:
      return 'Tipo inválido'
    

    return people
  else:
    return 'Arquivo não encontrado.'

def verificar_diretorio():
  files = os.listdir()
  for arquivo in files:
    verificar_documento(arquivo)

#verificar_documento("TCC_COM CPF.pdf")
#verificar_documento("TG.txt")
#verificar_documento("TCC_COM CPF.docx")